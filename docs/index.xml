<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Suvaditya Mukherjee | suvadityamuk</title>
<link>https://suvadityamuk.com/index.html</link>
<atom:link href="https://suvadityamuk.com/index.xml" rel="self" type="application/rss+xml"/>
<description>Suvaditya Mukherjee</description>
<generator>quarto-1.3.299</generator>
<lastBuildDate>Mon, 02 Jan 2023 18:30:00 GMT</lastBuildDate>
<item>
  <title>Accelerating Model Deployment using Transfer Learning and Vertex AI</title>
  <dc:creator>Suvaditya Mukherjee</dc:creator>
  <link>https://suvadityamuk.com/posts/2023-01-03-accelerating-model-deployment-using-transfer-learning-and-vertex-ai.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>As the field of Machine Learning progresses, the requirement for sharing your progress with the world increases exponentially. This holds true especially for early/mid-stage ML startups that are looking to get their product across to potential users as soon as possible while being able to maintain the load in a performant as well as cost-effective way.</p>
<p>This includes being able to leverage the latest research, as well as handling a ton of DevOps aspects related to maintaining the services provided. Along with that, preparing and deploying the models that have been developed in-house as a SaaS offering becomes a critical step in the complete pipeline.</p>
<p>In this article, I will be giving a brief introduction to how one can make use of pre-trained models available for free on the internet, consume and mold them to a specific use-case and then deploy it using TensorFlow Serving, Docker and Google Cloud’s Vertex AI.</p>
<p>This article assumes that you have a working knowledge of how Neural Networks work, how Docker works and what TensorFlow is. If you do not have the pre-requisite knowledge or require a refresher, consider going through the following resources:</p>
<ul>
<li><a href="https://docs.docker.com/get-started/overview/">How Docker Works</a></li>
<li><a href="https://www.tensorflow.org/">What is TensorFlow</a></li>
<li><a href="https://news.mit.edu/2017/explained-neural-networks-deep-learning-0414">How Neural Networks work</a></li>
</ul>
<p>This article is an addition to the slides, talk, and code presented as part of my presentation at GDG DevFest Raipur 2022 for the topic with the same title.</p>
<p>You can find the <a href="http://bit.ly/tf-vertex-ai">slides</a> here, and the <a href="https://github.com/suvadityamuk/Devfest-Raipur-22">code</a> here.</p>
</section>
<section id="table-of-contents" class="level2">
<h2 class="anchored" data-anchor-id="table-of-contents">Table of Contents</h2>
<p>This article can be divided into 2 stages.</p>
<section id="training" class="level3">
<h3 class="anchored" data-anchor-id="training">Training</h3>
<ul>
<li><p>Step 1: What are keras.applications and Hugging Face?</p></li>
<li><p>Step 2: How to use pre-trained models?</p></li>
<li><p>Example: Using it to make a customized pre-trained model</p></li>
</ul>
</section>
<section id="deployment" class="level3">
<h3 class="anchored" data-anchor-id="deployment">Deployment</h3>
<ul>
<li><p>Step 3: Use TensorFlow Serving and SavedModel</p></li>
<li><p>Step 4: Export SavedModel to Docker Image</p></li>
<li><p>Step 5: Create Vertex AI Model and Endpoints</p></li>
<li><p>Step 6: Perform Testing and Inference</p></li>
</ul>
</section>
</section>
<section id="training-1" class="level2">
<h2 class="anchored" data-anchor-id="training-1">Training</h2>
<section id="step-1-what-are-keras.applications-and-hugging-face" class="level3">
<h3 class="anchored" data-anchor-id="step-1-what-are-keras.applications-and-hugging-face">Step 1: What are keras.applications and Hugging Face?</h3>
<p>Pre-trained models are specific Deep-Learning models that have been trained on a certain dataset of a given task and are available freely on the internet. These models have weights for the network hosted in a way that they can be retrieved. If the user requires, they can also fine-tune the weights by initializing the model and training, using the pre-trained model as a starting point compared to using Random initialization.</p>
<p>The process of taking pre-trained models and fine-tuning them or using them on a different task than the one they were originally trained for, is known as Transfer Learning.</p>
<p>But where do you find these models?</p>
<ul>
<li><strong>TensorFlow-Keras ecosystem</strong></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/0*CU_rXCNSYjY5QMHg.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p>One of the most mature ecosystems for pre-trained models is available using the keras.applications Module or using <a href="https://tfhub.dev/">TensorFlow Hub</a>. <a href="https://www.tensorflow.org/api_docs/python/tf/keras/applications"><code>keras.applications</code></a> contains a total of 38 Vision models pre-trained on the ImageNet dataset by the team behind Keras. They also provide a table that details statistics like the number of parameters within the model as well as benchmarks like inference latency on a general configuration. These models are extensively used and are available free of charge.</p>
<p>Through this, you don’t need to just get inferences. You can get everything in between, be it feature-vectors or fine-tuned models, or even just the base model that can perform inference for ImageNet classes.</p>
<p>If it seems suitable to your use case, you can even convert these models to <a href="https://www.tensorflow.org/lite">TFLite</a> and deploy them to edge devices (provided the number of parameters is under a certain threshold to ensure support).</p>
<p>As Keras keeps on adding support for newer models, you can also check out the supplementary packages of <a href="https://keras.io/keras_cv/">KerasCV</a> and <a href="https://keras.io/keras_nlp/">KerasNLP</a>. They contain a larger set of more exotic models along with their pre-trained weights. <a href="https://keras.io/guides/keras_cv/generate_images_with_stable_diffusion/">(You can even try out the latest Stable Diffusion model directly from KerasCV)</a>. If that doesn’t fulfill your needs either, you can turn to community-supported and provided models made available via TensorFlow Hub. Folks from the community make implementations of different models using TensorFlow/Keras, train them and provide them through this centralized Hub.</p>
<ul>
<li><strong>Hugging Face ecosystem</strong></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:640/0*XLwV1E-sfEYxf32h.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p><a href="https://huggingface.co/">Hugging Face</a> is easily one of the largest, if not the largest host of models on the internet. With over 100,000 models available, there is a low chance that your use case cannot be fulfilled by a model from here. These models are contributed by the community, small-scale teams, large-scale enterprises, and everything in between.</p>
<p>Enterprises like Google, Microsoft, and Facebook also release pre-trained weights for their latest models from their research teams here. This gives you access to cutting-edge models in a simple manner and without much overhead.</p>
<p>Moreover, you get this access for free (while a paid service exists for accessing better compute).</p>
<p>The ecosystem also provides support for ancillary tasks around ML, like Accelerate (for training pipeline setups), Diffusers (for working with Diffusion Models), Datasets (for accessing the latest datasets), and Spaces (for hosting your models) along with many more.</p>
</section>
<section id="step-2-how-to-use-pre-trained-models" class="level3">
<h3 class="anchored" data-anchor-id="step-2-how-to-use-pre-trained-models">Step 2: How to use pre-trained models?</h3>
<p>Below are code samples for how you can make pre-trained models from each of the ecosystems mentioned above:</p>
<ul>
<li><code>keras.applications</code> - Getting a <a href="https://towardsdatascience.com/the-annotated-resnet-50-a6c536034758">ResNet-50 model</a></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.applications.resnet50 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResNet50, </span>
<span id="cb1-2">preprocess_input, decode_predictions</span>
<span id="cb1-3"></span>
<span id="cb1-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResNet50(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagenet'</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocess_input(image)</span>
<span id="cb1-7"></span>
<span id="cb1-8">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(x)</span>
<span id="cb1-9"></span>
<span id="cb1-10">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decode_predictions(preds)</span></code></pre></div>
</div>
<p>In the example above, we perform the following operations:</p>
<ol type="1">
<li>We perform the necessary imports and get the ResNet50 model and its helper functions (present within the same submodule) from <code>keras.applications</code> into the environment.</li>
<li>We initialize the ResNet50 Model with the weights used being the ones from ImageNet pre-training.</li>
<li>The <code>keras.applications.ResNet50</code> model requires all images passed as input to be in a certain format. Hence, we must use the built-in <code>preprocess_input</code> function to make the changes.</li>
<li>We perform inference by passing our preprocessed input image to the <code>model.predict()</code> function to get predictions.</li>
<li>Since the predictions are generated in the form of a confidence score along with the classes (where the class names are label-encoded), we make use of the <code>decode_predictions()</code> function to make sense of the output we received.</li>
</ol>
<ul>
<li>TensorFlow Hub: Getting the MLP Mixer model for generating Feature vectors</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">input_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb2-2"></span>
<span id="cb2-3">hub_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hub.KerasLayer(</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://tfhub.dev/sayakpaul/mixer_b16_i21k_fe/1"</span>, trainable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-5">)</span>
<span id="cb2-6"></span>
<span id="cb2-7">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hub_layer(input_layer)</span>
<span id="cb2-8"></span>
<span id="cb2-9">output_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Dense(num_classes, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>’softmax’)</span>
<span id="cb2-10"></span>
<span id="cb2-11">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>input_layer, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output_layer)</span></code></pre></div>
</div>
<p>In the example above, we instantiate a model using the Keras Functional API. In this, we perform the following steps:</p>
<ol type="1">
<li>Define a <code>keras.Input</code> layer that acts as an entry-point for the input tensor. Here, we define a shape that we can expect the input tensor to be.</li>
<li>We make use of the <code>tensorflow_hub</code> package and import the model we want to use as a <code>hub.KerasLayer</code> that downloads the model architecture and its trained weights for use.</li>
<li>We pass the input tensor to the layer we just made to perform a forward pass.</li>
<li>We add a <code>keras.layers.Dense</code> layer with the number of units equal to the number of classes, to generate softmax predictions.</li>
<li>Finally, we initialize a <code>keras.Model</code> instance with the chosen input and output layers in order to create the final model. This is the method of instantiating Functional API-based models for Keras.</li>
</ol>
<ul>
<li>Hugging Face ( transformers ): Getting the ViT model for 224 x 224 x 3 images</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ViTForImageClassification, ViTImageProcessor</span>
<span id="cb3-2"></span>
<span id="cb3-3">feature_extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ViTImageProcessor.from_pretrained(</span>
<span id="cb3-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"google/vit-base-patch16-224"</span></span>
<span id="cb3-5">)</span>
<span id="cb3-6"></span>
<span id="cb3-7">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_extractor(image, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  ViTForImageClassification.from_pretrained(</span>
<span id="cb3-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"google/vit-base-patch16-224"</span></span>
<span id="cb3-11">)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb3-14">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>inputs).logits</span>
<span id="cb3-15"></span>
<span id="cb3-16">predicted_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits.argmax(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()</span></code></pre></div>
</div>
<p>In the example above, we make use of PyTorch instead of TensorFlow. We perform the following steps:</p>
<ol type="1">
<li>We perform necessary imports to get the ViT model and its required Image processing helper functions.</li>
<li>We instantiate the ViTImageProcessor from the pre-trained weights as provided by the repository owner (in this case, Google).</li>
<li>We pass our image into the feature extractor to get our images formatted and ready for inference. ViT models require images to be passed in the form of uniform patches. This specific model requires your image to be of size 224 x 224 x 3 along with each patch being 16 x 16 in size.</li>
<li>We instantiate the ViTForImageClassification model and use the pre-trained weights from the same repository.</li>
<li>We use torch.no_grad() to make sure that gradients are not calculated for forward passes within the defined scope. This is for generating predictions. The predictions come as confidence scores for all possible classes. We perform an argmax() over the entire output tensor to get the highest resultant class and use it as the final prediction.</li>
</ol>
</section>
</section>
<section id="demo-using-it-to-make-a-customized-pre-trained-model" class="level2">
<h2 class="anchored" data-anchor-id="demo-using-it-to-make-a-customized-pre-trained-model">Demo: Using it to make a customized pre-trained model</h2>
<p>Now, we make use of a customized model in the form of a demo that we will use ahead in the latter part of the article as well.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To force inference using CPU only</span></span>
<span id="cb4-2">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CUDA_VISIBLE_DEVICES"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-1"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Model definition</span></span>
<span id="cb4-5">image_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Defining a resize Layer</span></span>
<span id="cb4-8">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Resizing(</span>
<span id="cb4-9">   height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lanczos3"</span>, crop_to_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-10">)(image_input)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a Rescaling layer to get image pixel values from [0, 255] to [0, 1)</span></span>
<span id="cb4-13">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Rescaling(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)(x)</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate a MobileNetV2 instance with pre-trained weights and the </span></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dense classifier being trained for ImageNet classes</span></span>
<span id="cb4-17">mobilenet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.applications.MobileNetV2(</span>
<span id="cb4-18">   alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,</span>
<span id="cb4-19">   include_top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-20">   weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imagenet"</span>,</span>
<span id="cb4-21">   classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb4-22">   classifier_activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"softmax"</span>,</span>
<span id="cb4-23">)</span>
<span id="cb4-24"></span>
<span id="cb4-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Passing input tensor for results</span></span>
<span id="cb4-26">model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mobilenet(x)</span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make Keras Model</span></span>
<span id="cb4-29">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_output)</span></code></pre></div>
</div>
<p>In this section, we have explored how we can make use of several different online services to access pre-trained models that allow us to move forward with developing on top of pre-existing work without requiring heavy Compute.</p>
<p>But this was only about the development of the solution. How do we actually get it out for the world to use?</p>
</section>
<section id="deployment-1" class="level2">
<h2 class="anchored" data-anchor-id="deployment-1">Deployment</h2>
<section id="step-3-use-tensorflow-serving-and-savedmodel" class="level3">
<h3 class="anchored" data-anchor-id="step-3-use-tensorflow-serving-and-savedmodel">Step 3: Use TensorFlow Serving and SavedModel</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/0*q2lsO0XuTx1f-Ria.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p><a href="https://www.tensorflow.org/tfx/guide/serving">TensorFlow Serving</a> is part of the larger TFX (TensorFlow Extended) ecosystem that helps users develop full production-scale pipelines. TF-Serving is a low-latency, high-throughput system that is flexible enough to allow a large array of options.</p>
<p>While more straightforward solutions exist to deploy models, like using <a href="https://flask.palletsprojects.com/">Flask</a> or <a href="https://www.djangoproject.com/">Django</a>, that would require you to write and maintain a lot of boilerplate along with performing maintenance, error-handling, and edge-case handling for the framework involved. With TF-Serving, all of that is abstracted away.</p>
<p>Another important fact is that TF-Serving is fully compatible with containerization, leading to no worries about packages, compatibility, dependency issues, and so on.</p>
<p>From here on forward, the example we have developed previously is what we will continue to use for the deployment experiment.</p>
<p>Below, we first write an inference function. This function will be used by TensorFlow Serving to process input and give results.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">version_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@tf.function</span>(input_signature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[tf.TensorSpec(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_bytes"</span>, </span>
<span id="cb5-4">  shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.string)])</span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_b64_string(b64str_tensor):</span>
<span id="cb5-6">   img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.reshape(b64str_tensor, [])</span>
<span id="cb5-7"></span>
<span id="cb5-8">   img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.io.decode_image(img, </span>
<span id="cb5-9">      channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb5-10">      dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.float16, </span>
<span id="cb5-11">      expand_animations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb5-12">    )</span>
<span id="cb5-13"></span>
<span id="cb5-14">   tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.expand_dims(img, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-15"></span>
<span id="cb5-16">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> model.call(tensor)</span></code></pre></div>
</div>
<p>In the above snippet, we define <code>version_number</code> for TF-Serving to maintain version control of the different models present together.</p>
<p>The <a href="https://www.tensorflow.org/api_docs/python/tf/function"><code>tf.function()</code></a> decorator is perhaps the most important line of code in the above snippet. This decorator will perform a tracing of the function and generate a computation graph for it. As a default, TensorFlow 2.0 defaults to Eager Execution to allow for better debugging. But the most performant way of execution is in the Graph mode. This decorator will trigger the heavy lifting and prepare the function in a language-agnostic definition. Here, we define a <a href="https://www.tensorflow.org/api_docs/python/tf/TensorSpec"><code>tf.TensorSpec</code></a> that allows us to define the kind of Input Tensor the function should expect. That means we will accept an input consisting of the bytes of the image in the form of a Base64 string.</p>
<p>We then perform the simple operations of decoding the image, preparing the tensor by batching it, and performing a forward class to generate results.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">model.save(</span>
<span id="cb6-2">   <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'./mobilenetv2-imagenet-devfest/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>version_number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb6-3">   save_format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tf'</span>,</span>
<span id="cb6-4">   include_optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb6-5">   overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb6-6">   signatures<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb6-7">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"serving_image_b64string"</span>:predict_b64_string</span>
<span id="cb6-8">   }</span>
<span id="cb6-9">)</span></code></pre></div>
</div>
<p>Here, we call the <code>model.save()</code> a function that is integral to the deployment process. It requires the following arguments:</p>
<ol type="1">
<li>File path: TF-Serving requires you to save it in the format of <code>{model_name}/{version_number}</code>.</li>
<li>Save Format: Setting this to <code>'tf'</code> will save the model as a Keras <a href="https://www.tensorflow.org/guide/saved_model"><code>SavedModel</code></a> , helping you to save model metadata, custom functions, weights, optimizer states, and so on. This is required for TF-Serving because the model will be run in Graph mode only.</li>
<li>Include Optimizer: Choose whether to include the optimizer state in the saved package</li>
<li>Overwrite: Choose whether to overwrite old data that may be present in the same file destination</li>
<li>Signatures: Here, we must define the function that should be used by TF-Serving to create the model endpoint and subsequently use it for inference. Here we give a name to the signature and pass the function object to it in the form of a dictionary</li>
</ol>
</section>
<section id="step-4-export-savedmodel-to-docker-image" class="level3">
<h3 class="anchored" data-anchor-id="step-4-export-savedmodel-to-docker-image">Step 4: Export SavedModel to Docker Image</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[suvaditya@fedora</span> ~ ]$ docker run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> serving_base tensorflow/serving</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[suvaditya@fedora</span> ~ ]$ docker cp /absolute/path/to/saved_model/model_name <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-4">serving_base:/models/model_name</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[suvaditya@fedora</span> ~ ]$ docker commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--change</span> “ENV MODEL_NAME model_name” <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\ </span></span>
<span id="cb7-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">serving_base</span> devfest-mobilenet-demo</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[suvaditya@fedora</span> ~ ]$ docker run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> 8501:8501 devfest-mobilenet-demo</span></code></pre></div>
<p>The code snippet above is a series of Docker commands that will perform the following steps:</p>
<ul>
<li>We first create a dummy container that is initialized using the tensorflow/serving image present on Docker Hub. We run it in a detached mode.</li>
<li>We give a cp instruction that will copy the contents from a source to the target directory for the Dockerfile of the image. Here, we copy the contents of the SavedModel file structure to a path in the container’s file system where TF-Serving expects your model’s files to be.</li>
<li>We commit the changes made to the Dockerfile, insert a new Environment variable for the container, and give a new name to this changed Dockerfile as devfest-mobilenet-demo coming from the serving_base container as the base.</li>
<li>Finally, we run a new container using the image we just created. We expose and forward requests to Port 8501 as TF-Serving is configured to serve REST API requests on this port. If you require, a separate gRPC server is also available on Port 8500 that can be exposed in a similar manner</li>
</ul>
</section>
<section id="step-5-create-vertex-ai-model-and-endpoints" class="level3">
<h3 class="anchored" data-anchor-id="step-5-create-vertex-ai-model-and-endpoints">Step 5: Create Vertex AI Model and Endpoints</h3>
<p><em>Note: The following steps require the presence of a Google Cloud Billing-enabled account. GCP offers $300 in credits for a duration of 90 days. To know more, click here.</em></p>
<p>Now, we move to Google Cloud Platform and its state-of-the-art Vertex AI offering.</p>
<p><strong>What is Vertex AI?</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:640/0*gAlcZyqGJkAAy_Yp.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p><a href="https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform"><strong>Vertex AI</strong></a> is the official end-to-end solution for all things ML present on GCP. It offers tools to work on each aspect of the full Machine Learning lifecycle.</p>
<ul>
<li>Dataset Collection and Version Control</li>
<li>Labeling</li>
<li>Pre-processing</li>
<li>Training</li>
<li>Deployment</li>
<li>Model Version</li>
<li>Logging &amp; Monitoring</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/format:webp/1*r1Vj8QxjG2SaNKfSAYlyqw.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p>We have already made a Docker Image that serves the model inside a TF-Serving runtime. Our Vertex AI Model deployment flow will consist of the following steps:</p>
<ul>
<li>Deploy the Docker image we developed into <em>Google Artifact Registry</em>. This is done in order to maintain a central source for all model versions. Google Artifact Registry is the best solution for storing artifacts as it allows multiple different formats like Maven Packages, Docker Images, etc. all in one place, in comparison to the older Google Container Registry.</li>
<li>Import and create a <em>Vertex AI Model</em> resource from Artifact Registry.</li>
<li>Create a <em>Vertex AI Endpoint</em> that will accept the Vertex AI Model</li>
<li>Deploy the <em>Vertex AI Endpoint</em> and serve it for request-response traffic from the web.</li>
</ul>
</section>
<section id="put-image-into-artifact-registry" class="level3">
<h3 class="anchored" data-anchor-id="put-image-into-artifact-registry">1. Put image into Artifact Registry</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/0*9sgZL9pK3u6gZMcx.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[suvaditya@fedora</span> ~]$ docker tag devfest-mobilenet-demo <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-2">us-central1-docker.pkg.dev/test-da9ec/devfest-vertex-ai/devfest-mobilenet-demo</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[suvaditya@fedora</span> ~]$ docker push <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-5">us-central1-docker.pkg.dev/test-da9ec/devfest-vertex-ai/devfest-mobilenet-demo</span></code></pre></div>
<p>Here, we first go to the Artifact Registry screen and create a repository. We configure it to store Docker images. We tag the image using the URL of the repository which is of the format</p>
<p><em>{region}-{zone}-docker.pkg.dev/{project-id}/{repository_name}/{artifact_name}</em></p>
<p>We push the image to the same URL and upon the building of the image and its subsequent upload, it will be visible on the Console.</p>
</section>
<section id="create-vertex-ai-model-resource" class="level3">
<h3 class="anchored" data-anchor-id="create-vertex-ai-model-resource">2. Create Vertex AI Model resource</h3>
<p>To deploy our model, we have two steps. First, we must define a Vertex AI Model instance. This is done by importing the container image from Google Artifact Registry.</p>
<p>In our case, first, we set <code>devfest-mobilenet-imagenet</code> as the name of our model. We can also provide a small description of the model for documentation purposes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/0*rzCE1Ky5MkZOGmP0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p>Once the model is named, we choose the actual container image from Google Artifact Registry that we are going to use. Circling back to our example, we make use of our previous <code>devfest-mobilenet-demo</code> image as the basis of our model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/format:webp/1*-LhsLCd3Kh4Y8iE7G2J0hw.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p>If your solution is more customized (maybe using something other TF-Serving), you can choose to override the CMD or ENTRYPOINT line of your Dockerfile using the Command field during configuration. Options to set new Environment Variables or Arguments to the process are also present.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/format:webp/1*_3LGRjwQ5dOna32fmFG12g.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p>Finally, saving the model will allow you to see it on the Console.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/format:webp/1*v4Dttf2WkFBiKPl7XCTaFw.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
</section>
<section id="create-vertex-ai-endpoint-resource" class="level3">
<h3 class="anchored" data-anchor-id="create-vertex-ai-endpoint-resource">3. Create Vertex AI Endpoint resource</h3>
<p>With the Vertex AI Model prepared, we now make use of the console to create a Vertex AI Endpoint resource. This endpoint is what will control the full deployment, be it auto-scaling, security, serving, etc.</p>
<p>We can click on <em>’Create Endpoint`</em>, which will lead us into the endpoint-creation wizard.</p>
<p>In the first line, we give a name to our new Endpoint, followed by setting it up in a specific Region. Here, since our project is setup in <code>us-central1</code> , we are going to be restricted to just that. If we have a multi-region project, we can choose other locations too. We also get the option to set up access to the endpoint. If we choose, we can expose the endpoint freely to the internet, or we can make the endpoint private using a VPC network.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:640/0*fWteUFnEpcnpjX_V.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p>Now, we connect a Vertex AI Model with the Endpoint by using the model we had defined. We get to choose the version of the model we want to deploy. If we have multiple instances serving the model on the endpoint, we can choose to perform a traffic split. But if it is a single instance, we keep it to a full 100% split.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/format:webp/1*XtINIzlRXVVuKhohiUNHWg.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p>In this set of options, we can specify the configuration and the number of compute nodes we would like the model to use. These are backed by GCP Compute Engine and are fully managed. This solution, by its design, auto-scales according to demand and constraints. While a minimum number of compute nodes is set to maintain the availability of the service, we can set a maximum number to control costs.</p>
<p>An option to set a certain CPU threshold allows us to control when the service will scale up (or down) based on CPU usage.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/format:webp/1*XtlDtx-YHdJUpmxfNBAI-Q.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p>GPU acceleration is also made available for inference compute, as specified by the Accelerator type. If you have IAM set up within your project and have the permissions policy present in your organization, you can use a Service Account to set what kind of resources the service can requisitions, as an added security check on top of other cost-saving measures.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/format:webp/1*HBwqDm1XCr8zR-gAi9BSlQ.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p>Finally, we get options to enable and set up model monitoring, which would include the tracking of several metrics like Drift, Skew, etc. which allow us to understand how our model performs in production settings and what kind of changes are necessary to make sure that it performs as expected.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/0*-y48zTVwPOyjnVeC.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p>Now, let us see our deployment in action!</p>
</section>
<section id="step-6-perform-testing-and-inference" class="level3">
<h3 class="anchored" data-anchor-id="step-6-perform-testing-and-inference">Step 6: Perform Testing and Inference</h3>
<p>First, perform authentication into gcloud SDK on your local machine. Prepare the request in the form of a JSON file that will be sent in the body of the request. Make sure that you include the signature name to use since that becomes an integral part of how the model.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[suvaditya@fedora</span> ~]$ gcloud auth application-default login</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[suvaditya@fedora</span> ~]$ echo {</span>
<span id="cb9-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"instances"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> [{</span>
<span id="cb9-5">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_bytes"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> {</span>
<span id="cb9-6">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b64"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> “<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BASE64-OF-IMAGE-HERE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>”</span>
<span id="cb9-7">                <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-8">             <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-9">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb9-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"signature_name"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"serving_image_b64string"</span></span>
<span id="cb9-11"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> sample_request.json</span></code></pre></div>
<p>For better readability, add your Vertex AI-provided Endpoint ID and Project ID as environment variables in your shell. Finally, we define a cURL POST request as per the specifications in the code snippet below.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[suvaditya@fedora</span> ~]$ ENDPOINT_ID=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;YOUR-ENDPOINT-ID-HERE&gt;"</span></span>
<span id="cb10-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PROJECT_ID</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YOUR-PROJECT-ID-HERE"</span></span>
<span id="cb10-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">INPUT_DATA_FILE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sample_request.json"</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[suvaditya@fedora</span> ~]$ curl <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-6">-X POST <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-7">-H <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Authorization: Bearer </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> auth print-access-token<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-8">-H <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Content-Type: application/json"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-9">https://us-central1-aiplatform.googleapis.com/v1/projects/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${PROJECT_ID}</span>/locations/us-central1/endpoints/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ENDPOINT_ID}</span>:rawPredict <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-10">-d <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${INPUT_DATA_FILE}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</section>
<section id="predictions" class="level3">
<h3 class="anchored" data-anchor-id="predictions">Predictions :</h3>
<p>What you see below are the predictions of shape (1, 1000) that represent a tensor with output confidence scores for each of ImageNet’s 1000 classes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:720/0*4OmmfVvA_dVoPduh.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="what-have-we-accomplished" class="level2">
<h2 class="anchored" data-anchor-id="what-have-we-accomplished">What have we accomplished?</h2>
<p>By this time, we have completed all our setup. Quite a few things were done within this article. Take a look back at the problems we set out to solve:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/https:/miro.medium.com/v2/resize:fit:640/format:webp/1*04bjgqAE7RKBuQo4a9Bhxw.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<ul>
<li><strong>Scale</strong>: The solution we made is one that can be used in a production setting. With the capability of Vertex AI and the services for Auto-Scaling and Monitoring, you can leverage state-of-the-art tech to make sure your model is deployed in the most performant way possible.</li>
<li><strong>Can integrate with CI/CD Pipelines</strong>: Our solution is one that can be integrated into CI/CD pipelines due to Google Artifact Registry, which can be as simple as pushing to the registry. You can make use of other GCP Services (or Vertex AI) that will allow you to orchestrate the updates automatically.</li>
<li><strong>Optimizations</strong>: TF-Serving is inherently performant, allowing you to serve your model without any hassle. Due to its low-latency nature and graph-mode execution, performance is not a thing you need to worry about.</li>
<li><strong>Modularity</strong>: Each and every one of these components is easily replaceable or can be repaired with relative ease, compared to more rigid or non-debuggable products.</li>
<li><strong>Tracking</strong>: With state-of-the-art tracking features, your model performance is only a click away. You can leverage automatic insights from Vertex AI as well.</li>
</ul>
</section>
<section id="where-to-go-from-here" class="level1">
<h1><strong>Where to go from here?</strong></h1>
<p>Machine Learning can solve a major number of modern-day problems that startups or any kind of problem-solving body faces. Hence, it becomes an important field to stay on top of. But it is equally important to focus on the deployment aspect since, without it, your service is not available to your customers, leading to no value being added.</p>
<p>Below are some interesting reference links that can allow you to explore the world of TensorFlow Serving and Vertex AI further.</p>
<ol type="1">
<li><a href="https://www.tensorflow.org/tfx/guide/serving">Guide to TF-Serving (Official TensorFlow documentation)</a></li>
<li><a href="https://www.youtube.com/watch?v=gT4qqHMiEpA">Priyanka Vergadia’s video: Accelerate ML Experimentation and Deployment with Vertex AI</a></li>
<li><a href="https://cloud.google.com/architecture/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning">MLOps Architecture using GCP</a></li>
<li><a href="https://builtin.com/data-science/transfer-learning">What is Transfer Learning?</a></li>
</ol>
</section>
<section id="reference-documents" class="level1">
<h1><strong>Reference Documents</strong></h1>
<ol type="1">
<li><a href="https://www.tensorflow.org/tfx/serving/docker">TFX Serving with Docker</a></li>
<li><a href="https://cloud.google.com/vertex-ai/docs/predictions/overview">GCP Vertex AI Documentation</a></li>
</ol>
</section>
<section id="acknowledgments" class="level1">
<h1><strong>Acknowledgments</strong></h1>
<p>Thank you to <a href="https://www.linkedin.com/in/ivaibhavmalpani">Vaibhav Malpani</a> from GDG Cloud Mumbai for providing the GCP credits required to run the demo.</p>
<p>Thank you to <a href="https://www.linkedin.com/in/iromin">Romin Irani</a> for the opportunity to publish the blog in this publication.</p>
<p>Thank you to <a href="https://www.linkedin.com/in/sayak-paul">Sayak Paul</a> for guiding me towards Vertex AI (a very useful demo created by him that I made use of, as a reference point: <a href="https://huggingface.co/blog/deploy-vertex-ai">Deploying ViT on Vertex AI</a>)</p>
<p>Thank you to all the folks who reviewed my slides as part of my talk at GDG DevFest Raipur on the same topic.</p>


</section>

 ]]></description>
  <category>mlops</category>
  <category>docker</category>
  <category>computer-vision</category>
  <category>ai</category>
  <guid>https://suvadityamuk.com/posts/2023-01-03-accelerating-model-deployment-using-transfer-learning-and-vertex-ai.html</guid>
  <pubDate>Mon, 02 Jan 2023 18:30:00 GMT</pubDate>
  <media:content url="https://suvadityamuk.com/posts/images/tf-vertex-ai/vertex-ai.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title>How to make your models available to the public</title>
  <dc:creator>Suvaditya Mukherjee</dc:creator>
  <link>https://suvadityamuk.com/posts/2022-09-05-how-to-make-your-models-available-to-the-public.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>An end-to-end Machine Learning solution is an important way to bring AI to production and make it available for mass consumption and usage. But today, most AI practitioners simply do the pre-processing, training, evaluation and tuning stages and leave the remaining part to DevOps engineers.</p>
<p>As such, a new field of development named <a href="https://blogs.nvidia.com/blog/2020/09/03/what-is-mlops/">MLOps</a> has come into the mainstream. The focus has shifted from simply training and evaluation to also bringing and integrating it to production pipelines.</p>
<p>On an individual level as well, knowing how to bring your model to the public is an important tool to have in an AI practitioner’s skill-set.</p>
<p>In this article, we will be exploring how we can perform a small segment of the MLOps cycle in a simple and efficient manner using <strong>Keras</strong>, <strong>Flask</strong>, <strong>Gunicorn</strong> and <strong>Docker</strong>.</p>
<p>If you wish to skip through and go straight to the code, <a href="https://github.com/suvadityamuk/KerasDocker">click here to go to the GitHub repository</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/images/docker-blog/dockerblog.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
</section>
<section id="what-is-covered-in-this-tutorial" class="level2">
<h2 class="anchored" data-anchor-id="what-is-covered-in-this-tutorial">What is covered in this tutorial?</h2>
<ol type="1">
<li>Create a custom model using <strong><code>Keras</code></strong> and its off-the-shelf components<br>
</li>
<li>Prepare an inference pipeline<br>
</li>
<li>Develop a simple <code>Flask</code> app to <strong>expose the model for inference</strong><br>
</li>
<li>Define a <code>Dockerfile</code> using <code>Gunicorn</code><br>
</li>
<li><strong>Build our image</strong></li>
<li>Define a simple <strong>Github Actions workflow</strong> to build your image every time you push it to your repository</li>
</ol>
</section>
<section id="create-a-custom-model-using-keras" class="level2">
<h2 class="anchored" data-anchor-id="create-a-custom-model-using-keras">1) Create a custom model using Keras</h2>
<p>As an example, we are going to create a simple model using the Keras Functional API and an off-the-shelf MobileNetV2 model from <code>keras.applications</code> pretrained on ImageNet.</p>
<section id="import-headers" class="level3">
<h3 class="anchored" data-anchor-id="import-headers">Import headers</h3>
<p>We require <code>tensorflow</code>, <code>keras</code>, <code>Flask</code>, <code>PIL</code> and <code>os</code> for this tutorial. If using a virtual environment, you can use the <code>requirements.txt</code> file below to get your env prepared.</p>
<ul>
<li><code>tensorflow</code>: Used for matrix operations and back-end for keras</li>
<li><code>keras</code>: Used for high-level Deep Learning model-building API and get pre-trained model</li>
<li><code>Flask</code>: Used for building simple API for inference</li>
<li><code>PIL</code>: Used for handling images</li>
<li><code>os</code>: Used for setting environment variables</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keras</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> flask <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Flask</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> flask <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> request, jsonify</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span></code></pre></div>
</div>
</section>
<section id="set-options" class="level3">
<h3 class="anchored" data-anchor-id="set-options">Set options</h3>
<p>Since GPUs are a difficult resource to get a hold of, we set a Tensorflow flag to make any CUDA devices present invisible in the first place. <em>If you can run your container on a GPU, feel free to skip this line.</em></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To force inference using CPU only</span></span>
<span id="cb2-2">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CUDA_VISIBLE_DEVICES'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-1'</span></span></code></pre></div>
</div>
</section>
<section id="model-definition" class="level3">
<h3 class="anchored" data-anchor-id="model-definition">Model definition</h3>
<p>This model is made using the Keras Functional API. We take a simple <code>keras.Input</code> which accepts color (RGB) images of any size.<br>
The input is passed via the following layers:<br>
- <code>keras.layers.Resizing</code> : Used to resize the image tensor to a <strong>224x224x3</strong> tensor - <code>keras.layers.Rescaling</code> : Used to rescale the image tensor values from a [0,255] range to a [0,1] range - <code>keras.applications.MobileNetV2</code> : Used to import the <strong>MobileNetV2</strong> instance from Keras (pretrained on ImageNet)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">image_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb3-2"></span>
<span id="cb3-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Resizing(height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lanczos3'</span>, crop_to_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)(image_input)</span>
<span id="cb3-4"></span>
<span id="cb3-5">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Rescaling(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)(x)</span>
<span id="cb3-6"></span>
<span id="cb3-7">mobilenet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.applications.MobileNetV2(</span>
<span id="cb3-8">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,</span>
<span id="cb3-9">    include_top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-10">    weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imagenet"</span>,</span>
<span id="cb3-11">    input_tensor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_input,</span>
<span id="cb3-12">    classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb3-13">    classifier_activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"softmax"</span></span>
<span id="cb3-14">)</span>
<span id="cb3-15"></span>
<span id="cb3-16">model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mobilenet(x)</span>
<span id="cb3-17"></span>
<span id="cb3-18">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_output)</span></code></pre></div>
</div>
</section>
<section id="requirements-file" class="level3">
<h3 class="anchored" data-anchor-id="requirements-file">Requirements file</h3>
<p><code>Gunicorn</code> is used to deploy the API on several workers together to allow lower latency at the expense of increased compute consumption. Gunicorn is used since it implements WSGI. In a production environment, a front-facing server like <a href="https://www.nginx.com/"><strong>NGINX</strong></a> or <a href="https://httpd.apache.org/"><strong>Apache Web Server</strong></a> is used to host Static web pages and load balancers with Gunicorn running behind this layer to enable functionality.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">Flask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0.3</span></span>
<span id="cb4-2">Pillow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.2.0</span></span>
<span id="cb4-3">tensorflow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.9.1</span></span>
<span id="cb4-4">gunicorn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.1.0</span></span></code></pre></div>
</div>
</section>
</section>
<section id="prepare-an-inference-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="prepare-an-inference-pipeline">2) Prepare an inference pipeline</h2>
<p>We define a simple function which accepts a <code>tf.Tensor</code> and runs it through the model to return a final top-5 predictions dictionary result.</p>
<section id="inference-function" class="level3">
<h3 class="anchored" data-anchor-id="inference-function">Inference function</h3>
<p>The image, accepted as a <code>tf.Tensor</code>, is inferred using the function prepared before. The <code>numpy</code> value of the tensor is then extracted to get all the confidence scores for each class.<br>
This numpy array is then passed into <code>keras.applications.imagenet_utils.decode_predictions</code> to get the top 5 predictions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> inference(image: tf.Tensor):</span>
<span id="cb5-2">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(image).numpy()</span>
<span id="cb5-3">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.applications.imagenet_utils.decode_predictions(y, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb5-4">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> preds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]}</span>
<span id="cb5-5">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: v <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(result.items(), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> item: item[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])}</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span></code></pre></div>
</div>
</section>
</section>
<section id="make-a-simple-flask-app-to-expose-model-for-inference" class="level2">
<h2 class="anchored" data-anchor-id="make-a-simple-flask-app-to-expose-model-for-inference">3) Make a simple Flask App to expose model for inference</h2>
<p>Now, we define 2 simple endpoints at the routes <code>/</code> and <code>/inference</code>.<br>
- <code>/</code> (GET) : The first endpoint acts as a health-check to make sure that the API is up and running<br>
- <code>/inference</code> (POST) : The second endpoint accepts an image as a form field with the parameter name <code>image</code> and returns a dictionary with the confidence scores and the ImageNet class names</p>
<section id="flask-app-definition" class="level3">
<h3 class="anchored" data-anchor-id="flask-app-definition">Flask App definition</h3>
<p><code>app</code> is the name of the WSGI callable that will be used by Gunicorn later on. To know more about what WSGI is, check the Interesting Links section below.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Flask(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>)  </span></code></pre></div>
</div>
</section>
<section id="definition-of-health-check-endpoint" class="level3">
<h3 class="anchored" data-anchor-id="definition-of-health-check-endpoint">Definition of health-check endpoint</h3>
<p>To test whether the API is up and running, we simply hit a GET request on this endpoint to get the expected output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.route</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, methods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GET'</span>])</span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> health_check():</span>
<span id="cb7-3">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'outcome'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'endpoint working successfully'</span></span>
<span id="cb7-5">    }</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jsonify(result)</span></code></pre></div>
</div>
</section>
<section id="definition-of-inference-endpoint" class="level3">
<h3 class="anchored" data-anchor-id="definition-of-inference-endpoint">Definition of inference endpoint</h3>
<p>Here, we accept a <code>POST</code> request, extract the <code>image</code> parameter from the files sent in the request. This is stored in a file-stream format which is then passed into a <code>PIL.Image.open</code> to prepare the image. Finally, we perform some simple pre-processing to convert the <code>PIL</code> image to a <code>tf.Tensor</code> and prepare a batch of 1 image to be passed into our inference function. The result returned is then passed into <code>jsonify</code> for response preparation and execution</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.route</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/inference"</span>, methods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POST'</span>])</span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> perform_inference():</span>
<span id="cb8-3">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.files[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]</span>
<span id="cb8-4">    pil_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image.stream)</span>
<span id="cb8-5">    tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.preprocessing.image.img_to_array(pil_img)</span>
<span id="cb8-6">    tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.expand_dims(tensor, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-7">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inference(tensor)</span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jsonify(result)  </span></code></pre></div>
</div>
</section>
</section>
<section id="define-a-dockerfile-which-uses-gunicorn-for-deployment" class="level2">
<h2 class="anchored" data-anchor-id="define-a-dockerfile-which-uses-gunicorn-for-deployment">4) Define a Dockerfile which uses Gunicorn for deployment</h2>
<p>We are now done with defining our model and preparing it for inference using a simple Flask App. Here, we begin writing a <code>Dockerfile</code> and a <code>.dockerignore</code> to build a custom Docker Image</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">FROM ubuntu:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.04</span></span>
<span id="cb9-2"></span>
<span id="cb9-3">RUN apt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>get update <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> apt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>get install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb9-4">git <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb9-5">curl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb9-6">ca<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>certificates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb9-7">python3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb9-8">python3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb9-9">sudo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb9-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>rf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>lib<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>apt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>lists<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*</span></span>
<span id="cb9-11"></span>
<span id="cb9-12">RUN useradd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m docker_runner</span>
<span id="cb9-13"></span>
<span id="cb9-14">RUN chown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>R docker_runner:docker_runner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>home<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>docker_runner</span>
<span id="cb9-15"></span>
<span id="cb9-16">COPY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>chown<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>docker_runner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>home<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>docker_runner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>flask_app<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>keras<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>docker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>trial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span></span>
<span id="cb9-17"></span>
<span id="cb9-18">USER docker_runner</span>
<span id="cb9-19"></span>
<span id="cb9-20">WORKDIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>home<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>docker_runner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>flask_app<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>keras<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>docker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>trial</span>
<span id="cb9-21"></span>
<span id="cb9-22">ENV PATH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{PATH}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:/home/docker_runner/.local/bin"</span></span>
<span id="cb9-23"></span>
<span id="cb9-24">RUN pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>no<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cache<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r requirements.txt</span>
<span id="cb9-25"></span>
<span id="cb9-26">ENTRYPOINT [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gunicorn"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--bind"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0:5000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--workers=4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app:app"</span>]</span>
<span id="cb9-27"></span>
<span id="cb9-28">EXPOSE <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span></code></pre></div>
</div>
<section id="dockerfile" class="level3">
<h3 class="anchored" data-anchor-id="dockerfile">Dockerfile</h3>
<ul>
<li>The first line pulls the <code>ubuntu:20.04</code> image from Docker Hub to prepare a container with stock Ubuntu 20.04 Focal Fossa within it.<br>
</li>
<li>The first <code>RUN</code> command downloads and installs several essential packages that we require later ahead.</li>
<li>The next <code>RUN</code> command adds a user named docker_runner and creates a home directory for the user (using the -m option)</li>
<li>The next <code>RUN</code> command changes directory ownership and assigns docker_runner as the owner of its own home directory in a recursive manner for all files and subdirectories as well (using the -R option)</li>
<li>The <code>COPY</code> command moves all the files present in the current repository where the Dockerfile is into the container’s target directory</li>
<li>The <code>USER</code> command is used to change the current active user to <code>docker_runner</code></li>
<li>The <code>WORKDIR</code> command is used to change the current active directory to <code>/home/docker_runner/flask_app/keras-docker-trial</code></li>
<li>The <code>ENV</code> command is used to set the PATH environment variable and add our user’s <code>/.local/bin</code> directory to it</li>
<li>The <code>RUN</code> command is now used to install all the requirements and not use any cached directories or their SHA hashes while doing so</li>
<li>The <code>ENTRYPOINT</code> command is used to begin the API deployment using <code>gunicorn</code>. We bind the localhost’s port 5000 and start up 4 workers for this task. We specify the WSGI callable as <code>app</code> on the left side of <code>app:app</code>. If you changed the name of the Flask app in Step 3, then you should change this part as <code>{your_app_name}:app</code></li>
<li>The <code>EXPOSE</code> command is used to make the container listen on port 5000</li>
</ul>
</section>
<section id="dockerignore" class="level3">
<h3 class="anchored" data-anchor-id="dockerignore">.dockerignore</h3>
<p>We just ignore the <code>__pycache__/</code> directory as it generates intermediate files from CPython</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">__pycache__<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span></span></code></pre></div>
</div>
</section>
</section>
<section id="build-our-image" class="level2">
<h2 class="anchored" data-anchor-id="build-our-image">5) Build our image</h2>
<p>We now build our image and assign it a tag <code>keras-docker-trial</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">docker build . <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t keras<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>docker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>trial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> Dockerfile</span></code></pre></div>
</div>
</section>
<section id="define-a-simple-github-actions-workflow-to-build-your-image-every-time-you-push-it-to-your-repository" class="level2">
<h2 class="anchored" data-anchor-id="define-a-simple-github-actions-workflow-to-build-your-image-every-time-you-push-it-to-your-repository">6) Define a simple GitHub Actions workflow to build your image every time you push it to your repository</h2>
<p>Here, as an extra step, we use GitHub Actions to build our image as a test every time a Push is made to any branch or if a PR is merged in the repository. This needs to be added only if you are preparing a repository on GitHub for your model.</p>
<ul>
<li><code>name</code>&nbsp;: Assigns a name to the workflow</li>
<li><code>on</code>&nbsp;: Defines the triggers for when the workflow is to be used</li>
<li><code>env</code>&nbsp;: Sets environment variables</li>
<li><code>jobs</code>&nbsp;: Defines the different commands and workflow actions to be run as part of the current workflow</li>
<li><code>runs-on</code>&nbsp;: Defines which GitHub-hosted runner is used for execution of workflow</li>
<li><code>actions/checkout@v3</code>&nbsp;: Used to check-out the code from repository</li>
<li><code>Build Docker Image</code>&nbsp;: Build image from Dockerfile present in repository</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">name: Docker CI</span>
<span id="cb12-2"></span>
<span id="cb12-3">on:</span>
<span id="cb12-4">  push:</span>
<span id="cb12-5">  pull_request:</span>
<span id="cb12-6">    types: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'opened'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reopened'</span>]</span>
<span id="cb12-7"></span>
<span id="cb12-8">env:</span>
<span id="cb12-9">  BUILD_CONFIGURATION: Release</span>
<span id="cb12-10"></span>
<span id="cb12-11">jobs:</span>
<span id="cb12-12">  job1:</span>
<span id="cb12-13">    runs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>on: ubuntu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>latest</span>
<span id="cb12-14">    steps:</span>
<span id="cb12-15">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name: Check<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>out the pushed code</span>
<span id="cb12-16">        uses: actions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>checkout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>v3</span>
<span id="cb12-17"></span>
<span id="cb12-18">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name: Build Docker image</span>
<span id="cb12-19">        run: docker build . <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t keras<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>docker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>trial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> Dockerfile</span></code></pre></div>
</div>
</section>
<section id="test-the-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="test-the-pipeline">Test the pipeline</h2>
<p>Above, we have defined the model and deployed it using Docker and Gunicorn. You can find some example screenshots of the deployment and its predictions via Postman API Explorer below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/images/docker-blog/terminal.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p align="center">
Terminal command
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/images/docker-blog/health-check.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p align="center">
GET request on health-check
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/images/docker-blog/inference.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p align="center">
GET request on inference
</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://suvadityamuk.com/posts/images/docker-blog/goldfish.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image</figcaption><p></p>
</figure>
</div>
<p align="center">
The Goldfish image sent for request via Postman
</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Above, we have completed the development of a simple Keras model, its deployment via Docker and a GitHub Actions workflow for CI(Continuous Integration).</p>
</section>
<section id="future-scope" class="level2">
<h2 class="anchored" data-anchor-id="future-scope">Future Scope</h2>
<p>This is only a small part of what can be done as a part of a simple MLOps pipeline. CML (Continuous Machine Learning) and DVC (Data Version Control) are two important concepts that are an integral part of every self-sustaining machine learning workflow and can be explored further. Resources to do so are present in the Interesting Links section.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>1.) <a href="https://docs.docker.com/docker-hub/">Docker Hub Documentation</a><br>
2.) <a href="https://keras.io/api/applications/mobilenet/#mobilenetv2-function">Keras Applications Documentation</a><br>
3.) <a href="https://docs.gunicorn.org/en/stable/configure.html">Gunicorn Documentation</a></p>
</section>
<section id="interesting-links" class="level2">
<h2 class="anchored" data-anchor-id="interesting-links">Interesting Links</h2>
<p>1.) <a href="https://cml.dev/">What is CML?</a><br>
2.) <a href="https://dvc.org/doc/user-guide/what-is-dvc">What is DVC?</a><br>
3.) <a href="https://wsgi.readthedocs.io/en/latest/what.html">What is WSGI (Web Server Gateway Interface)?</a><br>
4.) <a href="https://neptune.ai/blog/mlops">Detailed blog on What is MLOps?</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <category>docker</category>
  <category>computer-vision</category>
  <category>ai</category>
  <guid>https://suvadityamuk.com/posts/2022-09-05-how-to-make-your-models-available-to-the-public.html</guid>
  <pubDate>Sun, 04 Sep 2022 18:30:00 GMT</pubDate>
  <media:content url="https://suvadityamuk.com/posts/images/docker-blog/mlops-loop-dockerblog.png" medium="image" type="image/png" height="104" width="144"/>
</item>
<item>
  <title>The Annotated ResNet-50</title>
  <dc:creator>Suvaditya Mukherjee</dc:creator>
  <link>https://suvadityamuk.com/posts/2022-08-05-the-annotated-resnet.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The ResNet architecture is considered to be among the most popular Convolutional Neural Network architectures around. Introduced by Microsoft Research in 2015, <strong>Residual Networks</strong> (ResNet in short) broke several records when it was first introduced in <a href="https://arxiv.org/pdf/1512.03385.pdf">this paper by He. et. al</a></p>
</section>
<section id="why-resnet" class="level2">
<h2 class="anchored" data-anchor-id="why-resnet">Why ResNet?</h2>
<p>The requirement for a model like ResNet arose due to a number of pitfalls in modern networks at the time.</p>
<ol type="1">
<li><p><strong>Difficulty in training deep neural networks</strong>: As the number of layers in a model increases, the number of parameters in the model increases exponentially. For each Convolutional layer, a total of <img src="https://latex.codecogs.com/png.latex?((height_%7Bkernel%7D%20%5Ccdot%20width_%7Bkernel%7D%20%5Ccdot%20filters_%7Binput%7D)%20+%201)%20%5Ccdot%20filters_%7Boutput%7D"> gets added to the bill. To put it into context, a simple 7x7 kernel Convolution layer from 3 channels to 32 channels adds 4736 parameters. An increase in the number of layers in the interest of experimentation leads to an equal increase in complexity for training the model. Training then requires greater computational power and memory.</p></li>
<li><p><strong>More expressive, less different</strong>: A neural network is often considered to be a function approximator. It has the ability to model functions given input, target and a comparison between the function output and target. Adding multiple layers into a network makes it more capable to model complex functions. But results published in the paper stated that a 20-layer plain neural network performs considerably better than a 56-layer plain neural network as can be seen in the below graph.<br>
<img src="https://suvadityamuk.com/posts/images/resnet50/resnet-plain-comparisons.png" class="img-fluid"> {% cite he2015deep %}</p>
<p>Adding layers can be seen as an expansion of the function space. For example, multiple layers added together can be seen as a function <img src="https://latex.codecogs.com/png.latex?F">. This function <img src="https://latex.codecogs.com/png.latex?F"> can be expressed as a representation of a function space <img src="https://latex.codecogs.com/png.latex?F%60"> that it can reach/model.<br>
Having your desirable function in <img src="https://latex.codecogs.com/png.latex?F'"> would be a lucky chance, but more often than not, it is not the case. Adding layers here allows us to expand and change around the function space <img src="https://latex.codecogs.com/png.latex?F'">, allowing us to cover a larger space in the larger parent function space consisting of all possible functions in the conceivable universe. But this method has an inherent pitfall. As the function space becomes larger, there is no guarantee that we get closer to our target function. In fact, there is a good chance that in the experimental phase, you move away from the function space that may have the function you actually need.<br>
</p>
<p>Did the jargon confuse you? Let’s take an analogy of a needle and a haystack.<br>
Let the needle be the perfect weights of the neural network, or as explained before, a function. Let the haystack be all the possible functions that can be made.<br>
One starts from a single search area and tries to zero into the needle from there. Adding layers is equivalent to moving your search area and making it bigger. But that comes with the risk of moving away from the place where the needle actually is as well as making our search more time-consuming and difficult. Larger the haystack, more difficult it is to find the perfect needle. What is the solution, then?<br>
</p>
<p>Quite simple and elegant, actually. Nest your function spaces.<br>
This is done for a few simple reasons. The most important one being the fact that it allows you to ensure that while the model adds layers to increase the size of the function space, you don’t end up degrading the model. This gives the guarantee that while our model can do better with more layers, it will not do any worse.<br>
Coming back to our haystack analogy, this is equivalent to making our search space larger, but making sure that we do not move away from our current search space.</p>
<p><img src="https://suvadityamuk.com/posts/https:/i.ibb.co/NZ42zpC/function-classes.png" class="img-fluid">{% cite zhang2021dive %}</p></li>
<li><p><strong>Vanishing/Exploding Gradient</strong>: This is one of the most common problems plaguing the training of larger/deep neural networks and is a result of oversight in terms of numerical stability of the network’s parameters.<br>
During backpropagation, as we keep moving from the deep to the shallow layers, the chain rule of differentiation makes us multiply the gradients. Often, these gradients are small, to the order of <img src="https://latex.codecogs.com/png.latex?10%5E%7B-5%7D"> or more. According to some simple math, as these small numbers keep getting multiplied with each other, they keep becoming infinitesimally smaller, making almost negligible changes to the weights.<br>
On the other end of the spectrum, there are cases when the gradient reaches orders upto <img src="https://latex.codecogs.com/png.latex?10%5E%7B4%7D"> and more. As these large gradients multiply with each other, the values tend to move towards infinity. Allowing such a large range of values to be in the numerical domain for weights makes convergence difficult to achieve.<br>
This problem is popularly known as the Vanishing/Exploding gradient problem. ResNet, due to its architecture, does not allow these problems to occur <em>at all</em>. How so? The skip connections (described ahead) do not allow it as they act as gradient super-highways, allowing it to flow without being altered by a large magnitude.</p></li>
</ol>
</section>
<section id="what-are-skip-connections" class="level2">
<h2 class="anchored" data-anchor-id="what-are-skip-connections">What are Skip Connections?</h2>
<p>The ResNet paper popularized the approach of using Skip Connections. If you recall, the approach to solving our function space problems was to nest them. In terms of applying it to our use-case, it was the introduction of a simple addition of the identity function to the output.<br>
In mathematical terms, it would mean <img src="https://latex.codecogs.com/png.latex?y%20=%20x%20+%20F(x)"> where y is the final output of the layer.</p>
<p><img src="https://suvadityamuk.com/posts/images/resnet50/residual_diagram.png" class="img-fluid"> {% cite he2015deep %}</p>
<p>In terms of architecture, if any layer ends up damaging the performance of the model in a plain network, it gets skipped due to the presence of the skip-connections</p>
</section>
<section id="architecture" class="level2">
<h2 class="anchored" data-anchor-id="architecture">Architecture</h2>
<p><img src="https://suvadityamuk.com/posts/images/resnet50/resnet50.png" class="img-fluid"></p>
<p>The ResNet-50 architecture can be broken down into 6 parts 1. Input Pre-processing 2. <code>Cfg[0]</code> blocks 3. <code>Cfg[1]</code> blocks 4. <code>Cfg[2]</code> blocks 5. <code>Cfg[3]</code> blocks 6. Fully-connected layer</p>
<p>Different versions of the ResNet architecture use a varying number of Cfg blocks at different levels, as mentioned in the figure above. A detailed, informative listing can be found below</p>
<p><img src="https://suvadityamuk.com/posts/images/resnet50/resnet-layerinfo.png" class="img-fluid"></p>
</section>
<section id="show-me-the-code" class="level2">
<h2 class="anchored" data-anchor-id="show-me-the-code">Show me the code!</h2>
<p>The best way to understand the concept is through some code. The implementation below is done in Keras, uses the standard ResNet-50 architecture (ResNet has several versions, differing in the depth of the network). We will train the model on the famous Stanford Dogs dataset by Stanford AI</p>
<section id="import-headers" class="level3">
<h3 class="anchored" data-anchor-id="import-headers">Import headers</h3>
<div class="cell" data-outputid="d45026ab-758a-4139-fdba-66f58635e2b3">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>q tfds</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keras</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow_datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tfds</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PIL</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pathlib</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PIL.Image</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-10">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span></code></pre></div>
</details>
</div>
</section>
<section id="dataset-download-and-pre-processing" class="level3">
<h3 class="anchored" data-anchor-id="dataset-download-and-pre-processing">Dataset download and pre-processing</h3>
<p>We download the Stanford Dogs dataset using Tensorflow Datasets (stable) and split it into a training, validation and test set.<br>
Along with the images and labels, we also get some meta-data which gives us more information about the dataset. That is stored in <code>ds_info</code> and printed in a human-readable manner.<br>
We also make use of <code>tfds.show_examples()</code> to print some random example images and labels from the dataset.<br>
We run <code>tfds.benchmark()</code> to perform a benchmarking test on the iterator provided by <code>tf.data.Dataset</code><br>
We perform the following best-practice steps on the <code>tf.data.Dataset</code> object to make it efficient: - <code>batch(BATCH_SIZE)</code> : Allows us to prepare mini-batches within the dataset. Note that the batching operation requires all images to be of the same size and have the same number of channels - <code>map(format_image)</code> : Cast the image into a <code>tf.float32</code> Tensor, normalize all values in the range <img src="https://latex.codecogs.com/png.latex?%5B0,1%5D">, resize the image from its original shape to the model-input shape of <img src="https://latex.codecogs.com/png.latex?(224,%20224,%203)"> using the <code>lanczos3</code> kernel method - <code>prefetch(BUFFER_SIZE)</code> : Pre-fetch brings in the next batch of the dataset during training into memory while the current batch is being processed, reducing the I/O time but requiring more memory in the GPU - <code>cache()</code> : Caches the first batch of the iterator to reduce load-times, similar to prefetch with the difference simply being that cache will load the files but not push into GPU memory</p>
<div class="cell" data-outputid="6be31f50-8199-44a9-b798-4a86dc57023c" data-execution_count="2">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">(train_ds, valid_ds, test_ds), ds_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfds.load(</span>
<span id="cb2-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stanford_dogs'</span>, </span>
<span id="cb2-3">    split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test[0%:10%]'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test[10%:]'</span>], </span>
<span id="cb2-4">    shuffle_files<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, with_info<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb2-5">    as_supervised<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-6">)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset info: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ds_info<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of training samples : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ds_info<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>splits[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>num_examples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of training samples : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ds_info<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>splits[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>num_examples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Description : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ds_info<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-13">tfds.show_examples(train_ds, ds_info)</span>
<span id="cb2-14"></span>
<span id="cb2-15">CLASS_TYPES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_info.features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].num_classes</span>
<span id="cb2-16">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Benchmark results'</span>)</span>
<span id="cb2-19">tfds.benchmark(train_ds)</span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> format_image(image, label):</span>
<span id="cb2-22"></span>
<span id="cb2-23">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.cast(image, tf.float32)</span>
<span id="cb2-24">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb2-25">    image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.image.resize_with_pad(image, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lanczos3'</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, label</span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> prepare_ds(ds):</span>
<span id="cb2-29">    ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(format_image)</span>
<span id="cb2-30">    ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.batch(BATCH_SIZE)</span>
<span id="cb2-31">    ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.prefetch(tf.data.AUTOTUNE)</span>
<span id="cb2-32">    ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.cache()</span>
<span id="cb2-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ds</span>
<span id="cb2-34"></span>
<span id="cb2-35">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prepare_ds(train_ds)</span>
<span id="cb2-36">valid_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prepare_ds(valid_ds)</span>
<span id="cb2-37">test_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prepare_ds(test_ds)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading and preparing dataset 778.12 MiB (download: 778.12 MiB, generated: Unknown size, total: 778.12 MiB) to /root/tensorflow_datasets/stanford_dogs/0.2.0...
Dataset stanford_dogs downloaded and prepared to /root/tensorflow_datasets/stanford_dogs/0.2.0. Subsequent calls will reuse this data.
Dataset info: 

Name: stanford_dogs

Number of training samples : 12000

Number of training samples : 8580

Description : The Stanford Dogs dataset contains images of 120 breeds of dogs from around
the world. This dataset has been built using images and annotation from
ImageNet for the task of fine-grained image categorization. There are
20,580 images, out of which 12,000 are used for training and 8580 for
testing. Class labels and bounding box annotations are provided
for all the 12,000 images.
Benchmark results

************ Summary ************

Examples/sec (First included) 787.00 ex/sec (total: 12000 ex, 15.25 sec)
Examples/sec (First only) 10.34 ex/sec (total: 1 ex, 0.10 sec)
Examples/sec (First excluded) 791.95 ex/sec (total: 11999 ex, 15.15 sec)</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a02de679985b413a8bdc22c9e774f886","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5e1f815d8a704c7797e7c215ca191412","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c29c6d80985342388800f24fa6712f6d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"104336ef9fef42b3b4229773cb6c031c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"efcccb6fd29c4fffaf6880abb7466b91","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3f715cb71e9f4f53923320d96bc78aaa","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a06f3b0fd71648ba9b67c2bf8e7ee35d","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7e1934210c2a4c8f9bf0dfafd88ce864","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"80f4ab2b72df47669d44488776773221","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d893ecbaad104ec3b6170babe4de7431","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://suvadityamuk.com/posts/2022-08-05-The-Annotated-ResNet_files/figure-html/cell-3-output-12.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e3756334b5c844a3959eeb720f7dbfd7","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
</section>
<section id="augmentation" class="level3">
<h3 class="anchored" data-anchor-id="augmentation">Augmentation</h3>
<p>We perform some data augmentation to allow our model to be more robust. A RandomFlip, RandomRotation and RandomContrast is used to make the image set more varied. The parameters to the functions are probabilities, i.e.&nbsp;the chance that an image will undergo the selected transformation</p>
<div class="cell" data-cellview="form" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">imageAug <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Sequential([</span>
<span id="cb4-2">    keras.layers.RandomFlip(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"horizontal_and_vertical"</span>),</span>
<span id="cb4-3">    keras.layers.RandomRotation(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>),</span>
<span id="cb4-4">    keras.layers.RandomContrast(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb4-5">])</span></code></pre></div>
</details>
</div>
</section>
<section id="cfg0-block" class="level3">
<h3 class="anchored" data-anchor-id="cfg0-block">Cfg0 Block</h3>
<p>This block contains 1 Conv Layer and 2 Identity Layers. For helping numerical stability, we specify a kernel constraint which makes sure that all weights are normalized at constant intervals. Between 2 subsequent layers, we also include a BatchNormalization layer. The code has been written in an explicit way deliberately to help readers understand what design choices have been made at each stage</p>
<ul>
<li>Input Shape : <img src="https://latex.codecogs.com/png.latex?(56,%2056,%2064)"></li>
<li>Output Shape : <img src="https://latex.codecogs.com/png.latex?(56,%2056,%20256)"></li>
</ul>
<div class="cell" data-cellview="form" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">cfg0_conv_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg0_conv'</span>)</span>
<span id="cb5-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg0_conv_input)</span>
<span id="cb5-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb5-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb5-5">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb5-6">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb5-7">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb5-8"></span>
<span id="cb5-9">cfg0_conv_input_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg0_conv_input)</span>
<span id="cb5-10">cfg0_conv_input_op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(cfg0_conv_input_transform)</span>
<span id="cb5-11">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Add()([x, cfg0_conv_input_op])</span>
<span id="cb5-12">cfg0_conv_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.ReLU()(x)</span>
<span id="cb5-13"></span>
<span id="cb5-14">cfg0_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg0_conv_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg0_conv_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg0_conv'</span>)</span>
<span id="cb5-15"></span>
<span id="cb5-16"></span>
<span id="cb5-17"></span>
<span id="cb5-18"></span>
<span id="cb5-19">cfg0_identity_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg0_identity'</span>)</span>
<span id="cb5-20">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg0_identity_input)</span>
<span id="cb5-21">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb5-22">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb5-23">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb5-24">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb5-25">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb5-26"></span>
<span id="cb5-27">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Add()([x, cfg0_identity_input])</span>
<span id="cb5-28">cfg0_identity_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.ReLU()(x)</span>
<span id="cb5-29"></span>
<span id="cb5-30">cfg0_identity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg0_identity_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg0_identity_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg0_identity_p1'</span>)</span>
<span id="cb5-31"></span>
<span id="cb5-32"></span>
<span id="cb5-33"></span>
<span id="cb5-34"></span>
<span id="cb5-35">cfg0_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg0'</span>)</span>
<span id="cb5-36">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg0_conv(cfg0_input)</span>
<span id="cb5-37">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg0_identity(x)</span>
<span id="cb5-38">cfg0_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg0_identity(x)</span>
<span id="cb5-39"></span>
<span id="cb5-40">cfg0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg0_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg0_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg0_block'</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="cfg1-block" class="level3">
<h3 class="anchored" data-anchor-id="cfg1-block">Cfg1 Block</h3>
<p>This block contains 1 Conv Layer and 2 Identity Layers. This is similar to the Cfg0 blocks, with the difference mainly being in the number of <code>out_channels</code> in the Conv and Identity layers being more.</p>
<ul>
<li>Input Shape : <img src="https://latex.codecogs.com/png.latex?(56,%2056,%20256)"></li>
<li>Output Shape : <img src="https://latex.codecogs.com/png.latex?(28,%2028,%20512)"></li>
</ul>
<div class="cell" data-cellview="form" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">cfg1_conv_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg1_conv'</span>)</span>
<span id="cb6-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg1_conv_input)</span>
<span id="cb6-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb6-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb6-5">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb6-6">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb6-7">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb6-8"></span>
<span id="cb6-9">cfg1_conv_input_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg1_conv_input)</span>
<span id="cb6-10">cfg1_conv_input_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(cfg1_conv_input_transform)</span>
<span id="cb6-11">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Add()([x, cfg1_conv_input_output])</span>
<span id="cb6-12">cfg1_conv_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.ReLU()(x)</span>
<span id="cb6-13"></span>
<span id="cb6-14">cfg1_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg1_conv_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg1_conv_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg1_conv'</span>)</span>
<span id="cb6-15"></span>
<span id="cb6-16"></span>
<span id="cb6-17"></span>
<span id="cb6-18"></span>
<span id="cb6-19">cfg1_identity_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg1_identity'</span>)</span>
<span id="cb6-20">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg1_identity_input)</span>
<span id="cb6-21">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb6-22">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb6-23">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb6-24">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb6-25">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb6-26"></span>
<span id="cb6-27">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Add()([x, cfg1_identity_input])</span>
<span id="cb6-28">cfg1_identity_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.ReLU()(x)</span>
<span id="cb6-29"></span>
<span id="cb6-30">cfg1_identity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg1_identity_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg1_identity_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg1_identity_p1'</span>)</span>
<span id="cb6-31"></span>
<span id="cb6-32"></span>
<span id="cb6-33">cfg1_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg1'</span>)</span>
<span id="cb6-34">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg1_conv(cfg1_input)</span>
<span id="cb6-35">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg1_identity(x)</span>
<span id="cb6-36">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg1_identity(x)</span>
<span id="cb6-37">cfg1_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg1_identity(x)</span>
<span id="cb6-38"></span>
<span id="cb6-39">cfg1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg1_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg1_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg1_block'</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="cfg2-block" class="level3">
<h3 class="anchored" data-anchor-id="cfg2-block">Cfg2 Block</h3>
<p>This block contains 1 Conv layer and 5 Identity layers. This is one of the more important blocks for ResNet as most versions of the model differ in this block-space.</p>
<ul>
<li>Input Shape : <img src="https://latex.codecogs.com/png.latex?(28,%2028,%20512)"></li>
<li>Output Shape : <img src="https://latex.codecogs.com/png.latex?(14,%2014,%201024)"></li>
</ul>
<div class="cell" data-cellview="form" data-execution_count="6">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">cfg2_conv_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg2_conv'</span>)</span>
<span id="cb7-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg2_conv_input)</span>
<span id="cb7-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb7-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb7-5">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb7-6">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb7-7">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb7-8"></span>
<span id="cb7-9">cfg2_conv_input_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg2_conv_input)</span>
<span id="cb7-10">cfg2_conv_input_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(cfg2_conv_input_transform)</span>
<span id="cb7-11">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Add()([x, cfg2_conv_input_output])</span>
<span id="cb7-12">cfg2_conv_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.ReLU()(x)</span>
<span id="cb7-13"></span>
<span id="cb7-14">cfg2_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg2_conv_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg2_conv_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg2_conv'</span>)</span>
<span id="cb7-15"></span>
<span id="cb7-16"></span>
<span id="cb7-17"></span>
<span id="cb7-18"></span>
<span id="cb7-19">cfg2_identity_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg2_identity'</span>)</span>
<span id="cb7-20">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg2_identity_input)</span>
<span id="cb7-21">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb7-22">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb7-23">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb7-24">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb7-25">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb7-26"></span>
<span id="cb7-27">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Add()([x, cfg2_identity_input])</span>
<span id="cb7-28">cfg2_identity_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.ReLU()(x)</span>
<span id="cb7-29"></span>
<span id="cb7-30">cfg2_identity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg2_identity_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg2_identity_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg2_identity_p1'</span>)</span>
<span id="cb7-31"></span>
<span id="cb7-32"></span>
<span id="cb7-33">cfg2_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg2'</span>)</span>
<span id="cb7-34">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg2_conv(cfg2_input)</span>
<span id="cb7-35">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg2_identity(x)</span>
<span id="cb7-36">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg2_identity(x)</span>
<span id="cb7-37">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg2_identity(x)</span>
<span id="cb7-38">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg2_identity(x)</span>
<span id="cb7-39">cfg2_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg2_identity(x)</span>
<span id="cb7-40"></span>
<span id="cb7-41">cfg2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg2_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg2_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg2_block'</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="cfg3-block" class="level3">
<h3 class="anchored" data-anchor-id="cfg3-block">Cfg3 Block</h3>
<p>This block contains 1 Conv Layer and 2 Identity Layers. This is the last set of Convolutional Layer blocks present in the network.</p>
<ul>
<li>Input Shape : <img src="https://latex.codecogs.com/png.latex?(14,%2014,%201024)"></li>
<li>Output Shape : <img src="https://latex.codecogs.com/png.latex?(7,%207,%202048)"></li>
</ul>
<div class="cell" data-cellview="form" data-execution_count="7">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">cfg3_conv_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg3_conv'</span>)</span>
<span id="cb8-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg3_conv_input)</span>
<span id="cb8-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb8-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb8-5">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb8-6">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb8-7">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb8-8"></span>
<span id="cb8-9">cfg3_conv_input_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg3_conv_input)</span>
<span id="cb8-10">cfg3_conv_input_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(cfg3_conv_input_transform)</span>
<span id="cb8-11">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Add()([x, cfg3_conv_input_output])</span>
<span id="cb8-12">cfg3_conv_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.ReLU()(x)</span>
<span id="cb8-13"></span>
<span id="cb8-14">cfg3_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg3_conv_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg3_conv_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg3_conv'</span>)</span>
<span id="cb8-15"></span>
<span id="cb8-16"></span>
<span id="cb8-17"></span>
<span id="cb8-18"></span>
<span id="cb8-19">cfg3_identity_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg3_identity'</span>)</span>
<span id="cb8-20">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (cfg3_identity_input)</span>
<span id="cb8-21">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb8-22">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb8-23">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb8-24">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)) (x)</span>
<span id="cb8-25">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.BatchNormalization()(x)</span>
<span id="cb8-26"></span>
<span id="cb8-27">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Add()([x, cfg3_identity_input])</span>
<span id="cb8-28">cfg3_identity_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.ReLU()(x)</span>
<span id="cb8-29"></span>
<span id="cb8-30">cfg3_identity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg3_identity_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg3_identity_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg3_identity_p1'</span>)</span>
<span id="cb8-31"></span>
<span id="cb8-32"></span>
<span id="cb8-33">cfg3_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg3'</span>)</span>
<span id="cb8-34">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg3_conv(cfg3_input)</span>
<span id="cb8-35">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg3_identity(x)</span>
<span id="cb8-36">cfg3_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg3_identity(x)</span>
<span id="cb8-37"></span>
<span id="cb8-38">cfg3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg3_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg3_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cfg3_block'</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="classifier-block" class="level3">
<h3 class="anchored" data-anchor-id="classifier-block">Classifier Block</h3>
<p>This block contains an <code>AveragePooling</code> Layer, a <code>Dropout</code> Layer and a <code>Flatten</code> layer. At this block, the feature map is finally flattened and pushed into a Fully Connected Layer which is then used for producing predictions. A Softmax activation is applied to generate logits/probabilities.</p>
<ul>
<li>Input Shape : <img src="https://latex.codecogs.com/png.latex?(7,%207,%202048)"></li>
<li>Output Shape : <img src="https://latex.codecogs.com/png.latex?(%201,"> CLASS_TYPES <img src="https://latex.codecogs.com/png.latex?)"></li>
</ul>
<div class="cell" data-cellview="form" data-execution_count="8">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">classifier_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classifier'</span>)</span>
<span id="cb9-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.AveragePooling2D(pool_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)(classifier_input)</span>
<span id="cb9-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)(x)</span>
<span id="cb9-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Flatten()(x)</span>
<span id="cb9-5">classifier_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Dense(CLASS_TYPES, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'softmax'</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>))(x)</span>
<span id="cb9-6"></span>
<span id="cb9-7">classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>classifier_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>classifier_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classifier'</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="build-resnet-model" class="level3">
<h3 class="anchored" data-anchor-id="build-resnet-model">Build ResNet Model</h3>
<p>Now we take all the blocks and join them together to create the final ResNet Model. In our entire process, we have used the Keras Functional API, which is a best-practice for Tensorflow<br>
We also perform some visualizations, namely <code>model.summary()</code> to print out the structure of the model’s layers and <code>keras.utils.plot_model()</code> to plot the visualized Directed Acyclic Graph of the model that will be used by Tensorflow in the backend to streamline execution</p>
<div class="cell" data-cellview="form" data-outputid="0a8ed95c-4b5c-4cac-cf9e-d5bf0eb2cad6" data-execution_count="9">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build_resnet_model():</span>
<span id="cb10-2">    resnet_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>)</span>
<span id="cb10-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> imageAug(resnet_input)</span>
<span id="cb10-4">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, kernel_constraint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.constraints.max_norm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>))(x)</span>
<span id="cb10-5">    conv1_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.layers.MaxPooling2D(pool_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) (x)</span>
<span id="cb10-6">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg0(conv1_output)</span>
<span id="cb10-7">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg1(x)</span>
<span id="cb10-8">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg2(x)</span>
<span id="cb10-9">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg3(x)</span>
<span id="cb10-10">    model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classifier(x)</span>
<span id="cb10-11">    resnet_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.Model(inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>resnet_input, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_output, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet50'</span>)</span>
<span id="cb10-12"></span>
<span id="cb10-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(resnet_model.summary())</span>
<span id="cb10-14"></span>
<span id="cb10-15">    resnet_model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(</span>
<span id="cb10-16">        optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.optimizers.Adam(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0005</span>),</span>
<span id="cb10-17">        loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keras.losses.SparseCategoricalCrossentropy(from_logits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb10-18">        metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>],</span>
<span id="cb10-19">    )</span>
<span id="cb10-20">    </span>
<span id="cb10-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> resnet_model</span>
<span id="cb10-22">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_resnet_model()</span>
<span id="cb10-23"></span>
<span id="cb10-24"></span>
<span id="cb10-25">keras.utils.plot_model(model, show_shapes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, rankdir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TB'</span>, show_layer_activations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, expand_nested<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Model: "resnet50"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input (InputLayer)          [(None, 224, 224, 3)]     0         
                                                                 
 sequential (Sequential)     (None, 224, 224, 3)       0         
                                                                 
 conv2d_28 (Conv2D)          (None, 112, 112, 64)      9472      
                                                                 
 max_pooling2d (MaxPooling2D  (None, 56, 56, 64)       0         
 )                                                               
                                                                 
 cfg0_block (Functional)     (None, 56, 56, 256)       148480    
                                                                 
 cfg1_block (Functional)     (None, 28, 28, 512)       665600    
                                                                 
 cfg2_block (Functional)     (None, 14, 14, 1024)      2641920   
                                                                 
 cfg3_block (Functional)     (None, 7, 7, 2048)        10526720  
                                                                 
 classifier (Functional)     (None, 120)               3932280   
                                                                 
=================================================================
Total params: 17,924,472
Trainable params: 17,893,752
Non-trainable params: 30,720
_________________________________________________________________
None</code></pre>
</div>
</div>
</section>
<section id="defining-callbacks" class="level3">
<h3 class="anchored" data-anchor-id="defining-callbacks">Defining Callbacks</h3>
<p>In <code>model.fit()</code>, we can define callbacks for the model that are invoked during training at pre-determined intervals. We define a Model Checkpoint callback that creates a snapshot of the model at the completion of each epoch.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">callbacks_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb12-2">    keras.callbacks.ModelCheckpoint(</span>
<span id="cb12-3">        filepath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resnet50_model/checkpoint_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{epoch:02d}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.hdf5'</span>,</span>
<span id="cb12-4">        monitor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_loss'</span>,</span>
<span id="cb12-5">        verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb12-6">        save_best_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb12-7">        mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>,</span>
<span id="cb12-8">        save_freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>,</span>
<span id="cb12-9">        options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb12-10">        initial_value_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb12-11">    )</span>
<span id="cb12-12">]</span>
<span id="cb12-13"></span>
<span id="cb12-14">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit(</span>
<span id="cb12-15">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_ds,</span>
<span id="cb12-16">    validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_ds,</span>
<span id="cb12-17">    callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>callbacks_list,</span>
<span id="cb12-18">    epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb12-19">)</span></code></pre></div>
</div>
<div class="cell" data-outputid="5a0e1b28-f1c7-49ea-bbf6-44f6e6cb45bc">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##collapse_show</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## If using Google Colaboratory, one can upload checkpoints onto Google Drive and use it directly.</span></span>
<span id="cb13-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> google.colab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> drive</span>
<span id="cb13-4">drive.mount(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/gdrive'</span>)</span>
<span id="cb13-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.models.load_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/content/gdrive/My Drive/checkpoint_18.hdf5'</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## If using local Jupyter Notebooks, one can use checkpoints from local drives itself.</span></span>
<span id="cb13-8">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.models.load_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./resnet50_model/checkpoint_18.hdf5'</span>)</span></code></pre></div>
</div>
</section>
<section id="get-model-history" class="level3">
<h3 class="anchored" data-anchor-id="get-model-history">Get model history</h3>
<p>We print the model history to get more information about the training process</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(history)</span></code></pre></div>
</div>
</section>
<section id="predicting-results" class="level3">
<h3 class="anchored" data-anchor-id="predicting-results">Predicting results</h3>
<p>We take the trained model and use it to perform predictions on the test set as well as calculate several metrics like Loss and Accuracy</p>
<div class="cell" data-outputid="7258ef14-a0c1-4b67-d00d-6bb022bc052d">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.evaluate(test_ds)</span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Results : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Above, we have visited the Residual Network architecture, gone over its salient features, implemented a ResNet-50 model from scratch and trained it to get inferences on the Stanford Dogs dataset.<br>
As a model, ResNet brought about a revolution in the field of Computer Vision and Deep Learning simultaneously. It went on to win the ImageNet Large Scale Visual Recognition Challenge of 2015 and COCO Competition. But it was only a stepping stone to many interesting variations which yielded better results. Check the Interesting Links section below to find some great blogs and research papers for the same.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>{% bibliography –cited %}</p>
</section>
<section id="interesting-links" class="level2">
<h2 class="anchored" data-anchor-id="interesting-links">Interesting Links</h2>
<ol type="1">
<li><a href="https://towardsdatascience.com/an-overview-of-resnet-and-its-variants-5281e2f56035">An overview of ResNets and its variants</a></li>
<li><a href="https://link.springer.com/chapter/10.1007/978-3-030-64340-9_13">Paper on Multi-scale ensemble of ResNet variants</a></li>
<li><a href="https://cloud.google.com/tpu/docs/tutorials/resnet">Training a ResNet-50 on a Cloud TPU</a></li>
</ol>


</section>

 ]]></description>
  <category>scratch-models</category>
  <category>computer-vision</category>
  <category>ai</category>
  <guid>https://suvadityamuk.com/posts/2022-08-05-the-annotated-resnet.html</guid>
  <pubDate>Thu, 04 Aug 2022 18:30:00 GMT</pubDate>
  <media:content url="https://suvadityamuk.com/posts/images/resnet50/resnet50.png" medium="image" type="image/png" height="41" width="144"/>
</item>
</channel>
</rss>
